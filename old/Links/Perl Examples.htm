<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://accad.osu.edu/~mlewis/Class/Perl/perl.html -->
<HTML><HEAD><TITLE>Perl Examples</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<META content="MSHTML 6.00.2900.5512" name=GENERATOR></HEAD>
<BODY text=#000000 bgColor=#ffffff>
<HR>
Please note: I think I made this page in 1997 as some quick scripts for common 
local tasks for my non-programmer students. I just noticed 13 years later this 
is the top google hit for "perl examples". This is VERY funny given how terrible 
my Perl knowledge is. Enjoy. -<A href="http://accad.osu.edu/~mlewis/">Matthew 
Lewis</A> 
<HR>

<CENTER>
<H1>Perl Examples</H1></CENTER><BR>
<HR>

<OL>
  <LI>Calling System Commands 
  <UL>
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#ip">Image 
    Processing</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#rf">Renaming 
    Files</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#fc">File 
    Conversion</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#cd">Creating 
    Directories</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#puf">Padding 
    &amp; Unpadding Files</A> </LI></UL><BR>
  <LI>Scanning the Network 
  <UL>
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#fm">Finding 
    Free Machines</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#p">Finding 
    Processes</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#fiad">Finding 
    Files</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#u">Finding 
    Users</A> </LI></UL><BR>
  <LI>File Manipulation 
  <UL>
    <LI><A 
    href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#ghf">Generating HTML 
    Files</A> 
    <LI><A 
    href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#gxs">Generating 
    Xpost Scripts</A> 
    <LI><A 
    href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#mtf">Modifying 
    Files</A> 
    <LI><A href="http://accad.osu.edu/~mlewis/Class/Perl/perl.html#crt">Convert 
    Raw Data</A> </LI></UL></LI></OL>
<HR>
<B>Remember: In order to be able to run your perl script, it must begin with the 
line:</B><BR><PRE>   #!/usr/local/bin/perl
</PRE><B>Furthermore, if you've named the file "myFile", then to make the file 
executable, you need to type in a unix window:</B><BR><PRE>   chmod 755 myFile
</PRE>
<HR>
<A name=ip>
<CENTER>
<H2>Image Processing</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# composite series of images over a background image
#

if ($#ARGV != 4) {
 print "usage: compem bg.rgb inbase outbase startNum stopNum\n";
 exit;
}

$bg = $ARGV[0];
$inbase = $ARGV[1];
$outbase = $ARGV[2];
$start = $ARGV[3];
$stop = $ARGV[4];

# for each image
for ($i=$start; $i &lt;= $stop; $i++) {

    # pad numbers
    $num = $i;
    if($i&lt;10) { $num = "00$i"; }
    elsif($i&lt;100) { $num = "0$i"; }

    # call unix command "over"
    $cmd = "over $bg $inbase.$num $outbase.$num 0 0";
    print $cmd."\n";
    if(system($cmd)) { print "over failed\n"; }
}

</PRE>
<HR>
<A name=rf>
<CENTER>
<H2>Renaming Files</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# rename series of frames
#
if ($#ARGV != 3) {
    print "usage: rename old new start stop\n";
    exit;
}

$old = $ARGV[0];
$new = $ARGV[1];
$start = $ARGV[2];
$stop = $ARGV[3];

for ($i=$start; $i &lt;= $stop; $i++) {

    $num = $i;
    if($i&lt;10) {	$num = "00$i"; }
    elsif($i&lt;100) { $num = "0$i"; }

    $cmd = "mv $old.$num $new.$num";
    print $cmd."\n";
    if(system($cmd)) { print "rename failed\n"; }
}

</PRE>
<HR>
<A name=fc>
<CENTER>
<H2>File Conversion</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# convert series of images from one format to another
#
if ($#ARGV != 5) {
    print "usage: fconvert intype outtype old new start stop\n";
    exit;
}

$intype = $ARGV[0];
$outtype = $ARGV[1];
$old = $ARGV[2];
$new = $ARGV[3];
$start = $ARGV[4];
$stop = $ARGV[5];

for ($i=$start; $i &lt;= $stop; $i++) {

    $num = $i;
    if($i&lt;10) {	$num = "00$i"; }
    elsif($i&lt;100) { $num = "0$i"; }

    $cmd = "imgcvt -i $intype -o $outtype $old.$num $new.$num";
    print $cmd."\n";
    if(system($cmd)) { print "imgcvt failed\n"; }
}

</PRE>
<HR>
<A name=cd>
<CENTER>
<H2>Creating Directories</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# create a series of directories
#
if ($#ARGV != 2) {
    print "usage: mkdirs base start stop\n";
    exit;
}

$base = $ARGV[0];
$start = $ARGV[1];
$stop = $ARGV[2];

for ($i=$start; $i &lt;= $stop; $i++) {

    $num = $i;
    if($i&lt;10) {	$num = "00$i"; }
    elsif($i&lt;100) { $num = "0$i"; }

    $cmd = "mkdir $base$num";
    print $cmd."\n";
    if(system($cmd)) { print "mkdir failed\n"; }
}

</PRE>
<HR>
<A name=puf>
<CENTER>
<H2>Padding &amp; Unpadding Files</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# pad file numbers with zeros
#
if ($#ARGV != 2) {
    print "usage: pad base start stop\n";
    exit;
}

$base = $ARGV[0];
$start = $ARGV[1];
$stop = $ARGV[2];

for ($i=$start; $i &lt;= $stop; $i++) {

    $num = $i;
    if($i&lt;10) {	$num = "00$i"; }
    elsif($i&lt;100) { $num = "0$i"; }

    $cmd = "mv $base$i $base$num";

    # to unpad, use this instead:
    # $cmd = "mv $base$num $base$i";

    print $cmd."\n";
    if(system($cmd)) { print "pad failed\n"; }
}

</PRE>
<HR>
<A name=fm>
<CENTER>
<H2>Finding Free Machines</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# search list of machines for machines with no users logged on
#
$machines = `systems sgi`;
chop($machines);
@sgis = split(/ /, $machines);
@sgis = sort(@sgis);

foreach $machine (@sgis) {

    if(!(`rusers $machine`)) {
	print "$machine\n";
    }
}

</PRE>
<HR>
<A name=p>
<CENTER>
<H2>Finding Processes</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# search for processes running on machines
#

if ($#ARGV != 0) {
    print "usage: findprocess process\n";
    exit;
}

$process = $ARGV[0];
$machines = `systems sgi`;
chop($machines);
@sgis = split(/ /,$machines);
@sgis = sort(@sgis);

foreach $machine (@sgis) {

    print "Checking $machine...\n";

    @lines = `rsh $machine \"ps -ef | grep $process | grep -v findprocess | grep -v grep\"`;

    if(@lines) {
	foreach $line (@lines) {
	    $line =~ /^\s*(\w+)\s+(\d+)/;
	    $user = $1;
	    $pid = $2;
	    print "$user on $machine  pid: $pid\n";
	}
    }
}

</PRE>
<HR>
<A name=fiad>
<CENTER>
<H2>Finding Files</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# search for a file in all subdirectories
#
if ($#ARGV != 0) {
    print "usage: findfile filename\n";
    exit;
}

$filename = $ARGV[0];

# look in current directory
$dir = `pwd`;
chop($dir);
&amp;searchDirectory($dir);

sub searchDirectory {
    local($dir);
    local(@lines);
    local($line);
    local($file);
    local($subdir);

    $dir = $_[0];

    # check for permission
    if(-x $dir) {

	# search this directory
	@lines = `cd $dir; ls -l | grep $filename`;
	foreach $line (@lines) {
	    $line =~ /\s+(\S+)$/;
	    $file = $1;
	    print "Found $file in $dir\n";
	}
	
	# search any sub directories
	@lines = `cd $dir; ls -l`;
	foreach $line (@lines) {
	    if($line =~ /^d/) {
		$line =~ /\s+(\S+)$/;
		$subdir = $dir."/".$1;
		&amp;searchDirectory($subdir);
	    }
	}
    }
}

</PRE>
<HR>
<A name=u>
<CENTER>
<H2>Finding Users</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# check whether user is logged on
#

if ($#ARGV != 0) {
    print "usage: finduser username\n";
    exit;
}

$username = $ARGV[0];
$machines = "insanity ".`systems sgi`;
chop($machines);
@machines = split(/ /,$machines);
@machines = sort(@machines);

foreach $machine (@machines) {
    
    if(`rusers $machine | grep $username`) {
	print "$username logged on $machine\n";
    }
}

</PRE>
<HR>
<A name=ghf>
<CENTER>
<H2>Generating HTML Files</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# create n html files linked together in slide show
#

if ($#ARGV != 1) {
    print "usage: htmlslides base num\n";
    exit;
}

$base = $ARGV[0];
$num = $ARGV[1];

for ($i=1; $i &lt;= $num; $i++) {

    open(HTML, "&gt;$base$i.html");

    if($i==$num) {
	$next = 1;
    } else {
	$next = $i+1;
    }

    print HTML "&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;$base$i&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n";
    print HTML "&lt;a href=\"$base$next.html\"&gt;&lt;img src=\"$base$i.jpg\"&gt;&lt;/a&gt;\n";
    print HTML "&lt;/body&gt;\n&lt;/html&gt;\n";

    close(HTML);
}

</PRE>
<HR>
<A name=gxs>
<CENTER>
<H2>Generating Xpost Scripts</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# generate an xpost script to adjust saturation, and run xpost
#
if ($#ARGV != 2) {
 print "usage: fixsat infile.tiff outfile.tiff satval\n";
 exit;
}

$infile = $ARGV[0];
$outfile = $ARGV[1];
$satval = $ARGV[2];

# open xpost script
open(XPOST, "&gt;__tmp.xp");

# set view to register A
print XPOST "view A\n";

# load original image into reg A
print XPOST "load $infile\n";

# run Kmult to turn down saturation
print XPOST "Kmult $satval $satval $satval  1.0 a b\n";

# set view to register B
print XPOST "view B\n";

# save unsaturated image
print XPOST "save tiff $outfile\n";

# close xpost script
close(XPOST);

# run xpost script
$cmd = "xpost -q -s __tmp.xp";
print $cmd."\n";
system($cmd);

# clean up
$cmd = "/bin/rm -f __tmp.xp";
print $cmd."\n";
system($cmd);

</PRE>
<HR>
<A name=mtf>
<CENTER>
<H2>Modifying Text Files</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# change all occurances of a string in a file to another string
#

if ($#ARGV != 3) {
    print "usage: chstring oldfile newfile oldstring newstring\n";
    exit;
}

$oldfile = $ARGV[0];
$newfile = $ARGV[1];
$old = $ARGV[2];
$new = $ARGV[3];

open(OF, $oldfile);
open(NF, "&gt;$newfile");

# read in each line of the file
while ($line = &lt;OF&gt;) {
    $line =~ s/$old/$new/;
    print NF $line;
}

close(OF);
close(NF);

</PRE>
<HR>
<A name=crt>
<CENTER>
<H2>Convert Raw Timecode Data to Readable Data</H2></CENTER><PRE>#!/usr/local/bin/perl
#
# Change raw timecode data to different format
#
# timecode data event looks like:
# 
# Event: 1
# 00:01:05:23
# 00:01:27:21
# a-2-9
# 
# Event: 2
# 00:01:56:13
# 00:02:03:19
# a-3-9
# 
# ...and so on...
#
# Want to change it to the form:
#
# a-2-9 = 21.93 seconds = 658 frames
# a-3-9 = 7.20 seconds = 216 frames
#

open(FP,"&lt;log.txt");

$first = 1;
$total = 0;

while($line = &lt;FP&gt;) {

    if ($line =~ /^\d\d/ &amp;&amp; $first) {
	$in = $line;
	$first = 0;
    } elsif ($line =~ /^\d\d/ &amp;&amp; !$first) {
	$out = $line;
	$first = 1;
    } elsif ($line =~ /^\w-/) {
	$shot = $line;
	chop($shot);

	# parse timecodes and
	# translate in and out into seconds
	$in =~ /(\d\d):(\d\d):(\d\d):(\d\d)/;
	$hrs = $1;
	$mns = $2;
	$scs = $3;
	$fms = $4;
	$inSecs = $hrs * 3600 + $mns * 60 + $scs + $fms / 30;

	$out =~ /(\d\d):(\d\d):(\d\d):(\d\d)/;
	$hrs = $1;
	$mns = $2;
	$scs = $3;
	$fms = $4;
	$outSecs = $hrs * 3600 + $mns * 60 + $scs + $fms / 30;

	# calc duration
	$dur = $outSecs - $inSecs;
	$total += $dur;

	# print line
	printf("$shot = %.2f seconds = %d frames\n", $dur, $dur * 30);
    }
}

print "total = ".($total / 60)." mins\n";

close FP;

</PRE>
<P>
<HR>
<A href="http://accad.osu.edu/~mlewis/">Matthew Lewis</A>, 1997 </BODY></HTML>
